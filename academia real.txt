<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Academia Real: Ferramenta de Escrita</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f4f8;
            color: #1a202c;
        }
    </style>
</head>
<body class="bg-gray-100 dark:bg-gray-900 transition-colors duration-500">

    <!-- Firebase SDKs -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, addDoc, onSnapshot, doc, updateDoc, deleteDoc, setDoc } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
        import { setLogLevel } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
        
        // Set Firebase logging level to debug for detailed console output
        setLogLevel('debug');

        // --- Firebase setup and initialization ---
        // Global variables provided by the Canvas environment.
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

        let app;
        let auth;
        let db;
        let userId = null;
        let currentBookId = null;
        let currentCollection = null;

        const templates = [
            { id: 'fantasia', title: 'O Último Suspiro do Dragão', author: 'Autor Anônimo', content: 'As lendas da Floresta Ecoante contam sobre a criatura que dorme sob as raízes das árvores milenares. Dizem que, no dia em que o sol não nascer, o dragão acordará...' },
            { id: 'romance', title: 'A Promessa da Rosa Branca', author: 'Autor Anônimo', content: 'No jardim onde o tempo parecia ter parado, ela encontrou um antigo diário. Suas páginas amareladas cheiravam a memórias e segredos guardados por gerações, e a primeira entrada dizia...' },
            { id: 'ficcao', title: 'O Código da Nebulosa', author: 'Autor Anônimo', content: 'A nave-exploradora 734, enviada para os confins da galáxia, havia perdido toda a comunicação com a Terra há vinte anos. Mas uma mensagem inesperada foi recebida: uma sequência de números que, à primeira vista, parecia um erro, mas era na verdade um código...' }
        ];

        if (Object.keys(firebaseConfig).length > 0) {
            app = initializeApp(firebaseConfig);
            auth = getAuth(app);
            db = getFirestore(app);

            onAuthStateChanged(auth, async (user) => {
                if (user) {
                    userId = user.uid;
                } else {
                    userId = crypto.randomUUID(); // Fallback for anonymous user
                }
                document.getElementById('userIdDisplay').textContent = `ID do Usuário: ${userId}`;
                setupPrivateBookListener();
                setupPublicBookListener();
            });

            if (initialAuthToken) {
                signInWithCustomToken(auth, initialAuthToken).catch(async (error) => {
                    console.error("Erro ao autenticar com token personalizado:", error);
                    await signInAnonymously(auth);
                });
            } else {
                signInAnonymously(auth);
            }
        } else {
            console.error("Firebase config is missing. The app will not be able to save data.");
            showMessage('Erro: Configuração do Firebase ausente.', 'red');
        }

        function showMessage(text, color = 'green') {
            const messageElement = document.getElementById('message');
            messageElement.textContent = text;
            messageElement.className = `p-3 rounded-md text-white text-center font-semibold mb-4 transition-all duration-300 transform ${color === 'green' ? 'bg-green-500' : 'bg-red-500'} scale-100`;
            setTimeout(() => {
                messageElement.classList.add('scale-0');
            }, 3000);
        }

        function toggleEditorMode(isReadOnly) {
            document.getElementById('bookTitle').readOnly = isReadOnly;
            document.getElementById('bookAuthor').readOnly = isReadOnly;
            document.getElementById('bookContent').readOnly = isReadOnly;
            document.getElementById('saveButton').style.display = isReadOnly ? 'none' : 'block';
            document.getElementById('publishButton').style.display = isReadOnly ? 'none' : 'block';
            document.getElementById('rateButtons').style.display = isReadOnly ? 'block' : 'none';
        }

        window.loadTemplate = (templateId) => {
            const template = templates.find(t => t.id === templateId);
            if (template) {
                document.getElementById('bookTitle').value = template.title;
                document.getElementById('bookAuthor').value = template.author;
                document.getElementById('bookContent').value = template.content;
                currentBookId = null;
                currentCollection = 'private';
                toggleEditorMode(false);
                showMessage(`Modelo "${template.title}" carregado com sucesso.`);
            }
        };

        window.newBook = () => {
            document.getElementById('bookTitle').value = '';
            document.getElementById('bookAuthor').value = '';
            document.getElementById('bookContent').value = '';
            currentBookId = null;
            currentCollection = 'private';
            toggleEditorMode(false);
            showMessage("Novo livro iniciado.");
        };

        window.saveBook = async () => {
            if (!db || !userId) {
                showMessage("Erro: Banco de dados não está pronto.", 'red');
                return;
            }

            const title = document.getElementById('bookTitle').value;
            const author = document.getElementById('bookAuthor').value;
            const content = document.getElementById('bookContent').value;
            const timestamp = new Date().toISOString();

            if (title.trim() === '' || content.trim() === '') {
                showMessage("Erro: Título e conteúdo não podem estar vazios.", 'red');
                return;
            }

            try {
                const bookData = { title, author, content, timestamp, userId };
                let docRef;

                if (currentBookId && currentCollection === 'private') {
                    docRef = doc(db, `artifacts/${appId}/users/${userId}/books`, currentBookId);
                    await updateDoc(docRef, bookData);
                    showMessage("Livro atualizado com sucesso!");
                } else {
                    docRef = await addDoc(collection(db, `artifacts/${appId}/users/${userId}/books`), bookData);
                    currentBookId = docRef.id;
                    currentCollection = 'private';
                    showMessage("Livro salvo com sucesso!");
                }
            } catch (e) {
                console.error("Erro ao salvar o livro: ", e);
                showMessage("Erro ao salvar o livro. Tente novamente.", 'red');
            }
        };

        window.loadPrivateBook = (bookId) => {
            const booksList = document.getElementById('savedBooksList');
            const bookItem = booksList.querySelector(`[data-id="${bookId}"]`);
            if (bookItem) {
                const bookData = JSON.parse(bookItem.dataset.book);
                document.getElementById('bookTitle').value = bookData.title;
                document.getElementById('bookAuthor').value = bookData.author;
                document.getElementById('bookContent').value = bookData.content;
                currentBookId = bookId;
                currentCollection = 'private';
                toggleEditorMode(false);
                showMessage(`Livro "${bookData.title}" carregado.`);
            }
        };

        window.deleteBook = async (bookId) => {
            if (!db || !userId || currentCollection !== 'private') {
                showMessage("Erro: Não é possível excluir este livro.", 'red');
                return;
            }
            try {
                const bookRef = doc(db, `artifacts/${appId}/users/${userId}/books`, bookId);
                await deleteDoc(bookRef);
                showMessage("Livro excluído com sucesso!");
                if (currentBookId === bookId) {
                    newBook();
                }
            } catch (e) {
                console.error("Erro ao excluir o livro: ", e);
                showMessage("Erro ao excluir o livro. Tente novamente.", 'red');
            }
        };

        window.publishBook = async () => {
            if (!db || !userId || !currentBookId || currentCollection !== 'private') {
                showMessage("Erro: Por favor, salve um livro antes de publicar.", 'red');
                return;
            }

            const title = document.getElementById('bookTitle').value;
            const author = document.getElementById('bookAuthor').value;
            const content = document.getElementById('bookContent').value;
            
            if (title.trim() === '' || content.trim() === '') {
                showMessage("Erro: Título e conteúdo não podem estar vazios para publicação.", 'red');
                return;
            }

            try {
                const publicBookData = { 
                    title, 
                    author, 
                    content, 
                    originalUserId: userId, 
                    likes: 0,
                    votedBy: []
                };
                await addDoc(collection(db, `artifacts/${appId}/public/data/publishedBooks`), publicBookData);
                showMessage("Livro publicado com sucesso!");
            } catch (e) {
                console.error("Erro ao publicar o livro: ", e);
                showMessage("Erro ao publicar o livro. Tente novamente.", 'red');
            }
        };

        window.loadPublicBook = (bookId, bookDataString) => {
            const bookData = JSON.parse(bookDataString);
            document.getElementById('bookTitle').value = bookData.title;
            document.getElementById('bookAuthor').value = bookData.author;
            document.getElementById('bookContent').value = bookData.content;
            document.getElementById('rateButtons').dataset.bookId = bookId;
            currentBookId = bookId;
            currentCollection = 'public';
            toggleEditorMode(true);
            showMessage(`Lendo: "${bookData.title}"`);
        };

        window.rateBook = async (voteType) => {
            if (!db || !userId || !currentBookId || currentCollection !== 'public') {
                showMessage("Erro: Não é possível avaliar este livro.", 'red');
                return;
            }
            const bookRef = doc(db, `artifacts/${appId}/public/data/publishedBooks`, currentBookId);
            try {
                const currentBook = document.getElementById('rateButtons').dataset.book;
                const bookData = JSON.parse(currentBook);

                if (bookData.votedBy.includes(userId)) {
                    showMessage("Você já avaliou este livro.", 'red');
                    return;
                }

                await updateDoc(bookRef, {
                    likes: bookData.likes + 1,
                    votedBy: [...bookData.votedBy, userId]
                });
                showMessage("Sua avaliação foi registrada!");
            } catch (e) {
                console.error("Erro ao avaliar o livro: ", e);
                showMessage("Erro ao avaliar. Tente novamente.", 'red');
            }
        };

        function setupPrivateBookListener() {
            if (!db || !userId) return;

            const booksCollectionRef = collection(db, `artifacts/${appId}/users/${userId}/books`);
            const savedBooksList = document.getElementById('savedBooksList');

            onSnapshot(booksCollectionRef, (querySnapshot) => {
                savedBooksList.innerHTML = '';
                if (querySnapshot.empty) {
                    savedBooksList.innerHTML = '<p class="text-center text-gray-400 mt-4">Nenhum livro salvo ainda. Comece a escrever!</p>';
                } else {
                    querySnapshot.forEach((doc) => {
                        const book = doc.data();
                        const bookItem = document.createElement('li');
                        bookItem.className = 'flex items-center justify-between p-3 mb-2 bg-white dark:bg-gray-800 rounded-lg shadow-sm transition-transform transform hover:scale-[1.01]';
                        bookItem.dataset.id = doc.id;
                        bookItem.innerHTML = `
                            <div class="flex-1">
                                <span class="block text-blue-600 dark:text-blue-400 font-bold">${book.title || 'Sem Título'}</span>
                                <span class="block text-xs text-gray-500 dark:text-gray-400">Por ${book.author || 'Autor Anônimo'}</span>
                            </div>
                            <div class="flex space-x-2">
                                <button onclick="loadPrivateBook('${doc.id}')" class="bg-green-500 text-white p-2 rounded-md text-sm hover:bg-green-600 transition-colors duration-200">
                                    Carregar
                                </button>
                                <button onclick="deleteBook('${doc.id}')" class="bg-red-500 text-white p-2 rounded-md text-sm hover:bg-red-600 transition-colors duration-200">
                                    Excluir
                                </button>
                            </div>
                        `;
                        savedBooksList.appendChild(bookItem);
                    });
                }
            });
        }

        function setupPublicBookListener() {
            if (!db) return;
            const publicBooksCollectionRef = collection(db, `artifacts/${appId}/public/data/publishedBooks`);
            const publicBooksList = document.getElementById('publicBooksList');

            onSnapshot(publicBooksCollectionRef, (querySnapshot) => {
                publicBooksList.innerHTML = '';
                if (querySnapshot.empty) {
                    publicBooksList.innerHTML = '<p class="text-center text-gray-400 mt-4">Nenhum livro público ainda. Seja o primeiro a publicar!</p>';
                } else {
                    querySnapshot.forEach((doc) => {
                        const book = doc.data();
                        const bookItem = document.createElement('li');
                        bookItem.className = 'flex flex-col p-3 mb-2 bg-white dark:bg-gray-800 rounded-lg shadow-sm transition-transform transform hover:scale-[1.01]';
                        bookItem.innerHTML = `
                            <div class="flex-1 mb-2">
                                <span class="block text-blue-600 dark:text-blue-400 font-bold">${book.title || 'Sem Título'}</span>
                                <span class="block text-xs text-gray-500 dark:text-gray-400">Por ${book.author || 'Autor Anônimo'}</span>
                            </div>
                            <div class="flex items-center justify-between">
                                <div class="flex items-center text-sm font-bold text-gray-700 dark:text-gray-300">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1 text-yellow-500" viewBox="0 0 20 20" fill="currentColor">
                                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                                    </svg>
                                    ${book.likes || 0}
                                </div>
                                <button onclick='loadPublicBook("${doc.id}", `${JSON.stringify(book)}`)' class="bg-blue-600 text-white p-2 rounded-md text-sm hover:bg-blue-700 transition-colors duration-200">
                                    Ler
                                </button>
                            </div>
                        `;
                        publicBooksList.appendChild(bookItem);
                    });
                }
            });
        }
    </script>

    <!-- App UI -->
    <div class="flex flex-col md:flex-row min-h-screen bg-gray-100 dark:bg-gray-900 transition-colors duration-500">

        <!-- Sidebar for Templates and Saved Books -->
        <div class="w-full md:w-1/4 p-6 bg-white dark:bg-gray-800 shadow-lg rounded-b-xl md:rounded-r-xl md:rounded-b-none overflow-y-auto">
            <h2 class="text-3xl font-extrabold text-gray-900 dark:text-gray-100 mb-4">
                Meus Livros
            </h2>
            <p id="userIdDisplay" class="text-xs text-gray-500 dark:text-gray-400 mb-6 break-all">Autenticando...</p>
            
            <div class="mb-6">
                <button onclick="newBook()" class="w-full bg-blue-600 text-white p-3 rounded-lg font-bold shadow-md hover:bg-blue-700 transition-colors duration-200">
                    Novo Livro
                </button>
            </div>

            <div class="mb-6">
                <h3 class="text-xl font-bold text-gray-900 dark:text-gray-100 mb-2">Modelos</h3>
                <div class="flex flex-col space-y-2">
                    <button onclick="loadTemplate('fantasia')" class="w-full text-left p-3 rounded-lg bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors duration-200">
                        O Último Suspiro do Dragão
                    </button>
                    <button onclick="loadTemplate('romance')" class="w-full text-left p-3 rounded-lg bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors duration-200">
                        A Promessa da Rosa Branca
                    </button>
                    <button onclick="loadTemplate('ficcao')" class="w-full text-left p-3 rounded-lg bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors duration-200">
                        O Código da Nebulosa
                    </button>
                </div>
            </div>

            <h3 class="text-xl font-bold text-gray-900 dark:text-gray-100 mb-2">Salvos</h3>
            <ul id="savedBooksList" class="space-y-2">
                <!-- Saved books will be loaded here -->
                <p class="text-center text-gray-400 mt-4">Carregando livros...</p>
            </ul>

            <h3 class="text-xl font-bold text-gray-900 dark:text-gray-100 mb-2 mt-6">Livros Públicos</h3>
            <ul id="publicBooksList" class="space-y-2">
                <!-- Public books will be loaded here -->
                <p class="text-center text-gray-400 mt-4">Carregando livros...</p>
            </ul>
        </div>

        <!-- Main Editor -->
        <div class="w-full md:w-3/4 p-6 flex flex-col">
            <h1 class="text-4xl md:text-5xl font-extrabold text-blue-600 dark:text-blue-400 mb-6 text-center md:text-left">
                Academia Real
            </h1>
            <div id="message" class="p-3 rounded-md text-white text-center font-semibold mb-4 transition-all duration-300 transform scale-0 bg-green-500"></div>
            
            <div class="flex flex-col space-y-4 mb-6">
                <input id="bookTitle" type="text" placeholder="Título do Livro" class="w-full p-4 rounded-lg border-2 border-gray-200 dark:border-gray-600 bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-gray-100 font-bold text-2xl placeholder-gray-400 dark:placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors duration-200">
                <input id="bookAuthor" type="text" placeholder="Nome do Autor" class="w-full p-3 rounded-lg border-2 border-gray-200 dark:border-gray-600 bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-gray-100 text-lg placeholder-gray-400 dark:placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors duration-200">
            </div>

            <textarea id="bookContent" placeholder="Comece a escrever sua história aqui..." rows="20" class="flex-1 p-6 rounded-lg border-2 border-gray-200 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 text-base placeholder-gray-400 dark:placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors duration-200"></textarea>
            
            <div class="mt-6 flex justify-end space-x-4">
                <button id="publishButton" onclick="publishBook()" class="bg-purple-600 text-white p-4 rounded-lg font-bold shadow-md hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition-colors duration-200">
                    Publicar Livro
                </button>
                <button id="saveButton" onclick="saveBook()" class="bg-blue-600 text-white p-4 rounded-lg font-bold shadow-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors duration-200">
                    Salvar Livro
                </button>
            </div>
            
            <div id="rateButtons" class="mt-6 hidden flex justify-center space-x-4" data-book-id="">
                 <button onclick="rateBook('like')" class="bg-green-500 text-white p-4 rounded-lg font-bold shadow-md hover:bg-green-600 transition-colors duration-200">
                     Gostei
                 </button>
             </div>
        </div>

    </div>
</body>
</html>
